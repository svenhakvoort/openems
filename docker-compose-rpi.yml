services:
  chronograf:
    network_mode: host
    image: chronograf:1.9.4
    ports:
      - '8888:8888'
    volumes:
      - chronografStorage:/var/lib/chronograf
    depends_on:
      - influxdb
    environment:
      - INFLUXDB_URL=http://localhost:8086
      - INFLUXDB_ORG=openems
      - INFLUXDB_INIT_BUCKET=openems
      - INFLUXDB_TOKEN=openems
  influxdb:
    network_mode: host
    image: influxdb:2.4.0
    container_name: influxdb
    ports:
      - "8083:8083"
      - "8086:8086"
      - "8090:8090"
      - "2003:2003"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: openems
      DOCKER_INFLUXDB_INIT_PASSWORD: openemsopenems
      DOCKER_INFLUXDB_INIT_ORG: openems
      DOCKER_INFLUXDB_INIT_BUCKET: openems
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: openems
    volumes:
      - influxData:/var/lib/influxdb2
      - influxConfig:/etc/influxdb2
  postgres:
    image: postgres:10.0
    network_mode: host
    environment:
      POSTGRES_USER: openems
      POSTGRES_PASSWORD: openems
      POSTGRES_DB: openems
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
  edge:
    network_mode: host
    depends_on:
      - backend
#    devices:
#      - "/dev/ttyUSB0:/dev/ttyUSB0"
    build:
      context: .
      dockerfile: EdgeRpi.Dockerfile
    ports:
      - 8080:8080 # Apache Felix Web Console
      - 8084:8084 # JSON/REST Api
      - 8085:8085 # JSON/Websocket Api
    volumes:
      - edgeData:/app/tools/docker/openems-edge/config.d
      - /etc/systemd/network:/etc/systemd/network:ro
  ui:
    network_mode: host
    depends_on:
      - backend
      - edge
    build:
      context: .
      dockerfile: UiRpi.Dockerfile
    ports:
      - 4200:4200
  backend:
    network_mode: host
    depends_on:
      odoo:
        condition: service_healthy
    build:
      context: .
      dockerfile: BackendRpi.Dockerfile
    ports:
      - 8075:8075 # Backend-to-Backend JSON/REST Api
      - 8076:8076 # Backend-to-Backend JSON/Websocket Api
      - 8079:8079 # Apache Felix Web Console
      - 8081:8081 # Edge-Websocket
      - 8082:8082 # UI-Websocket
  odoo:
    network_mode: host
    depends_on:
      - postgres
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8069" ]
      interval: 3s
      timeout: 10s
      retries: 60
      start_period: 30s
    build:
      context: .
      dockerfile: OdooRpi.Dockerfile
    ports:
      - 8089:8089
      - 8069:8069
      - 8071:8071
      - 8072:8072
  dsmrdb:
    # When using Postgres, release 13.x is supported only
    # due to the limited availability of client packages, especially for arm32v7
    image: postgres:14-alpine
    container_name: dsmrdb
    restart: always
    volumes:
      - dsmrdb:/var/lib/postgresql/data
    environment:
      - TZ=Europe/Amsterdam
      - PG_TZ=Europe/Amsterdam
      - POSTGRES_USER=dsmrreader
      - POSTGRES_PASSWORD=dsmrreader
      - POSTGRES_DB=dsmrreader
    healthcheck:
      # postgres is the default user, please update with
      # the DJANGO_DATABASE_USER used for dsmr-reader-docker
      # default for DSMR Reader is dsmrreader
      test: [ "CMD-SHELL", "pg_isready -U dsmrreader" ]
      interval: 10s
      timeout: 5s
      retries: 10
  dsmr:
    image: xirixiz/dsmr-reader-docker:latest
    depends_on:
      dsmrdb:
        condition: service_healthy
    container_name: dsmr
    links:
      - dsmrdb
    cap_add:
      - NET_ADMIN
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - dsmr_backups:/app/backups
    environment:
      - TZ=Europe/Amsterdam
      - DJANGO_TIME_ZONE=Europe/Amsterdam
      - VIRTUAL_HOST=localhost
      - DSMRREADER_REMOTE_DATALOGGER_SERIAL_BAUDRATE=115200
      - DSMRREADER_REMOTE_DATALOGGER_INPUT_METHOD=serial
      - DSMRREADER_REMOTE_DATALOGGER_SERIAL_PORT=/dev/ttyUSB0
      - DSMRREADER_REMOTE_DATALOGGER_SERIAL_BYTESIZE=8
      - DSMRREADER_REMOTE_DATALOGGER_SERIAL_PARITY=N
    ports:
      - 7777:80
      - 7779:443
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0"
    healthcheck:
      test:
        [
            "CMD",
            "curl",
            "-Lsf",
            "http://127.0.0.1/about",
            "-o",
            "/dev/null",
            "-w",
            "HTTP_%{http_code}"
        ]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  pgdata:
  edgeData:
  influxData:
  influxConfig:
  grafanaStorage:
  chronografStorage:
  dsmrdb:
  dsmrdb_backups:
